/**
 *  @ingroup util_group
 *  @file cmdlineobjectproperties.h
 *  @brief The header file for the command line option parser
 *  generated by GNU Gengetopt version 2.23
 *  http://www.gnu.org/software/gengetopt.
 *  DO NOT modify this file, since it can be overwritten
 *  @author GNU Gengetopt */

#ifndef CMDLINEOBJECTPROPERTIES_H
#define CMDLINEOBJECTPROPERTIES_H

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h> /* for FILE */

#ifdef __cplusplus
extern "C" {
#endif /* __cplusplus */

#ifndef CMDLINE_PARSER_OBJECT_PROPERTIES_PACKAGE
/** @brief the program name (used for printing errors) */
#define CMDLINE_PARSER_OBJECT_PROPERTIES_PACKAGE "maputil"
#endif

#ifndef CMDLINE_PARSER_OBJECT_PROPERTIES_PACKAGE_NAME
/** @brief the complete program name (used for help and version) */
#define CMDLINE_PARSER_OBJECT_PROPERTIES_PACKAGE_NAME "maputil"
#endif

#ifndef CMDLINE_PARSER_OBJECT_PROPERTIES_VERSION
/** @brief the program version */
#define CMDLINE_PARSER_OBJECT_PROPERTIES_VERSION "1"
#endif

enum enum_solidity { solidity__NULL = -1, solidity_arg_solid = 0, solidity_arg_semi_solid, solidity_arg_air };
enum enum_destructible { destructible__NULL = -1, destructible_arg_destructible = 0, destructible_arg_not_destructible };
enum enum_collectible { collectible__NULL = -1, collectible_arg_collectible = 0, collectible_arg_not_collectible };
enum enum_generator { generator__NULL = -1, generator_arg_generator = 0, generator_arg_not_generator };

/** @brief Where the command line options are stored */
struct gengetopt_args_info_object_properties
{
  const char *help_help; /**< @brief Print help and exit help description.  */
  const char *version_help; /**< @brief Print version and exit help description.  */
  char * path_arg;	/**< @brief Tile path.  */
  char * path_orig;	/**< @brief Tile path original value given at command line.  */
  const char *path_help; /**< @brief Tile path help description.  */
  int frames_arg;	/**< @brief Number of frames of the tile.  */
  char * frames_orig;	/**< @brief Number of frames of the tile original value given at command line.  */
  const char *frames_help; /**< @brief Number of frames of the tile help description.  */
  enum enum_solidity solidity_arg;	/**< @brief Solidity property of the tile.  */
  char * solidity_orig;	/**< @brief Solidity property of the tile original value given at command line.  */
  const char *solidity_help; /**< @brief Solidity property of the tile help description.  */
  enum enum_destructible destructible_arg;	/**< @brief Destructible property of the tile.  */
  char * destructible_orig;	/**< @brief Destructible property of the tile original value given at command line.  */
  const char *destructible_help; /**< @brief Destructible property of the tile help description.  */
  enum enum_collectible collectible_arg;	/**< @brief Collectible property of the tile.  */
  char * collectible_orig;	/**< @brief Collectible property of the tile original value given at command line.  */
  const char *collectible_help; /**< @brief Collectible property of the tile help description.  */
  enum enum_generator generator_arg;	/**< @brief Generator property of the tile.  */
  char * generator_orig;	/**< @brief Generator property of the tile original value given at command line.  */
  const char *generator_help; /**< @brief Generator property of the tile help description.  */
  
  unsigned int help_given ;	/**< @brief Whether help was given.  */
  unsigned int version_given ;	/**< @brief Whether version was given.  */
  unsigned int path_given ;	/**< @brief Whether path was given.  */
  unsigned int frames_given ;	/**< @brief Whether frames was given.  */
  unsigned int solidity_given ;	/**< @brief Whether solidity was given.  */
  unsigned int destructible_given ;	/**< @brief Whether destructible was given.  */
  unsigned int collectible_given ;	/**< @brief Whether collectible was given.  */
  unsigned int generator_given ;	/**< @brief Whether generator was given.  */

} ;

/** @brief The additional parameters to pass to parser functions */
struct cmdline_parser_object_properties_params
{
  int override; /**< @brief whether to override possibly already present options (default 0) */
  int initialize; /**< @brief whether to initialize the option structure gengetopt_args_info_object_properties (default 1) */
  int check_required; /**< @brief whether to check that all required options were provided (default 1) */
  int check_ambiguity; /**< @brief whether to check for options already specified in the option structure gengetopt_args_info_object_properties (default 0) */
  int print_errors; /**< @brief whether getopt_long should print an error message for a bad option (default 1) */
} ;

/** @brief the purpose string of the program */
extern const char *gengetopt_args_info_object_properties_purpose;
/** @brief the usage string of the program */
extern const char *gengetopt_args_info_object_properties_usage;
/** @brief the description string of the program */
extern const char *gengetopt_args_info_object_properties_description;
/** @brief all the lines making the help output */
extern const char *gengetopt_args_info_object_properties_help[];

/**
 * The command line parser
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties (int argc, char **argv,
  struct gengetopt_args_info_object_properties *args_info);

/**
 * The command line parser (version with additional parameters - deprecated)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_object_properties_ext() instead
 */
int cmdline_parser_object_properties2 (int argc, char **argv,
  struct gengetopt_args_info_object_properties *args_info,
  int override, int initialize, int check_required);

/**
 * The command line parser (version with additional parameters)
 * @param argc the number of command line options
 * @param argv the command line options
 * @param args_info the structure where option information will be stored
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties_ext (int argc, char **argv,
  struct gengetopt_args_info_object_properties *args_info,
  struct cmdline_parser_object_properties_params *params);

/**
 * Save the contents of the option struct into an already open FILE stream.
 * @param outfile the stream where to dump options
 * @param args_info the option struct to dump
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties_dump(FILE *outfile,
  struct gengetopt_args_info_object_properties *args_info);

/**
 * Save the contents of the option struct into a (text) file.
 * This file can be read by the config file parser (if generated by gengetopt)
 * @param filename the file where to save
 * @param args_info the option struct to save
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties_file_save(const char *filename,
  struct gengetopt_args_info_object_properties *args_info);

/**
 * Print the help
 */
void cmdline_parser_object_properties_print_help(void);
/**
 * Print the version
 */
void cmdline_parser_object_properties_print_version(void);

/**
 * Initializes all the fields a cmdline_parser_object_properties_params structure 
 * to their default values
 * @param params the structure to initialize
 */
void cmdline_parser_object_properties_params_init(struct cmdline_parser_object_properties_params *params);

/**
 * Allocates dynamically a cmdline_parser_object_properties_params structure and initializes
 * all its fields to their default values
 * @return the created and initialized cmdline_parser_object_properties_params structure
 */
struct cmdline_parser_object_properties_params *cmdline_parser_object_properties_params_create(void);

/**
 * Initializes the passed gengetopt_args_info_object_properties structure's fields
 * (also set default values for options that have a default)
 * @param args_info the structure to initialize
 */
void cmdline_parser_object_properties_init (struct gengetopt_args_info_object_properties *args_info);
/**
 * Deallocates the string fields of the gengetopt_args_info_object_properties structure
 * (but does not deallocate the structure itself)
 * @param args_info the structure to deallocate
 */
void cmdline_parser_object_properties_free (struct gengetopt_args_info_object_properties *args_info);

/**
 * The string parser (interprets the passed string as a command line)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties_string (const char *cmdline, struct gengetopt_args_info_object_properties *args_info,
  const char *prog_name);
/**
 * The string parser (version with additional parameters - deprecated)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param override whether to override possibly already present options
 * @param initialize whether to initialize the option structure my_args_info
 * @param check_required whether to check that all required options were provided
 * @return 0 if everything went fine, NON 0 if an error took place
 * @deprecated use cmdline_parser_object_properties_string_ext() instead
 */
int cmdline_parser_object_properties_string2 (const char *cmdline, struct gengetopt_args_info_object_properties *args_info,
  const char *prog_name,
  int override, int initialize, int check_required);
/**
 * The string parser (version with additional parameters)
 * @param cmdline the command line stirng
 * @param args_info the structure where option information will be stored
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @param params additional parameters for the parser
 * @return 0 if everything went fine, NON 0 if an error took place
 */
int cmdline_parser_object_properties_string_ext (const char *cmdline, struct gengetopt_args_info_object_properties *args_info,
  const char *prog_name,
  struct cmdline_parser_object_properties_params *params);

/**
 * Checks that all the required options were specified
 * @param args_info the structure to check
 * @param prog_name the name of the program that will be used to print
 *   possible errors
 * @return
 */
int cmdline_parser_object_properties_required (struct gengetopt_args_info_object_properties *args_info,
  const char *prog_name);

extern const char *cmdline_parser_object_properties_solidity_values[];  /**< @brief Possible values for solidity. */
extern const char *cmdline_parser_object_properties_destructible_values[];  /**< @brief Possible values for destructible. */
extern const char *cmdline_parser_object_properties_collectible_values[];  /**< @brief Possible values for collectible. */
extern const char *cmdline_parser_object_properties_generator_values[];  /**< @brief Possible values for generator. */


#ifdef __cplusplus
}
#endif /* __cplusplus */
#endif /* CMDLINEOBJECTPROPERTIES_H */
